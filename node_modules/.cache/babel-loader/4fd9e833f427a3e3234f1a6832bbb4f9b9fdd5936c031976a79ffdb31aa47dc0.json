{"ast":null,"code":"import { ethers, providers, utils } from 'ethers';\nimport { errorCodes } from 'eth-rpc-errors';\nimport { ProviderRpcError } from './types';\nimport { handleMultipleWalletExtensions, serializeChainId, serializeNetwork } from \"./utils\";\nimport { z } from \"zod\";\nimport { TypedEmitter } from 'tiny-typed-emitter';\nexport class MetamaskWallet extends TypedEmitter {\n  constructor() {\n    super();\n    this.name = 'metamask';\n    this._chain = 'eth';\n    this.contracts = {\n      MOCTOKEN: '0xB87EEDCbE62a289004B4537bAb84Ce77A7480155',\n      INVESTMENT: '0x217bc9c92b5d795b133e7fc466bce43b1373b991',\n      METASMART: '0x5D334E28db82D370414942f8413d28C0C4142517',\n      STAKING: '0x30F28E6b6F8592CA2ed6c8fe67FFde2d81E67CC0'\n    };\n    this._networks = {\n      eth: {\n        name: \"Ethereum Mainnet\",\n        symbol: 'GoerliETH',\n        rpcUrl: \"https://eth-goerli.g.alchemy.com/v2/Lu_oWw2AZJ9xd0oItEBFs-NDOUyfn9rL\",\n        chainId: 5,\n        blockExplorerUrl: 'https://goerli.etherscan.io'\n      },\n      bsc: {\n        name: \"Binance Smart Chain Testnet\",\n        symbol: 'tBNB',\n        rpcUrl: \"https://data-seed-prebsc-1-s1.binance.org:8545\",\n        chainId: 97,\n        blockExplorerUrl: 'https://testnet.bscscan.com/'\n      }\n    };\n    this.instances = new Map();\n    this._provider = void 0;\n    this._signer = void 0;\n    this._contractInterface = new utils.Interface(['function approve(address spender, uint256 amount) public virtual override returns (bool)', 'function buyMSmartWithRef(uint256 _amount, string memory _referralCode) external', 'function buyMSmart(uint256 _amount) public', 'function isRefSetNotAllowed(address addr) public view returns (bool)', 'function createReferralCode() external', 'function referralCode(address addr) public view returns (string)', 'function balanceOf(address addr) public view returns (uint256)', 'function stake(uint8 _pool, uint256 _amount, uint256 _lockPeriod) external', 'function getStakes(uint8 _pool, address addr) public view returns ((uint256, uint256, uint256, uint256, uint)[])', 'function previewRewards(address _user, uint8 _pool, uint256 _poolId) external view returns (uint256)', 'function userTeam(address addr) public view returns (uint256, uint256)', 'function poolTotalBalance(uint8 _pool) public view returns (uint256)', 'function referralRewards(address addr) public view returns (uint256)', 'function claim(uint8 _pool, uint256 _poolId) external', 'function allowance(address owner, address spender) external view returns (uint256)', 'event MSmartPurchased(address user, uint256 amount)']);\n    this.contractSubscriber = void 0;\n    this.setInstances(this._networks[this._chain]);\n    this._provider = new ethers.providers.JsonRpcProvider(this._networks.eth.rpcUrl);\n  }\n  setInstances(network) {\n    const provider = new providers.JsonRpcProvider(network.rpcUrl);\n    this.instances.set(this._chain, provider);\n  }\n  getInjectedProvider() {\n    // if (this._provider) {\n    //     return this._provider;\n    // }\n    const win = window;\n    const metamaskProvider = win.ethereum && handleMultipleWalletExtensions(win.ethereum, p => p.isMetaMask);\n    if (!win.ethereum || !win.ethereum.isMetaMask || typeof win.ethereum.request !== 'function' || !metamaskProvider) {\n      throw new ProviderRpcError(errorCodes.provider.unsupportedMethod, 'Not install extension');\n    }\n    this._provider = metamaskProvider;\n    return metamaskProvider;\n  }\n  async connect() {\n    var _provider$request;\n    const provider = this.getInjectedProvider();\n    await ((_provider$request = provider.request) === null || _provider$request === void 0 ? void 0 : _provider$request.call(provider, {\n      method: 'eth_requestAccounts'\n    }));\n    await this.getSigner(this._chain);\n    await localStorage.setItem('wallet', this.name);\n    await this.initSubscriptions();\n  }\n  initSubscriptions() {\n    const investment = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n    const staking = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer);\n    investment.on('MSmartPurchased', (addr, amount) => {\n      console.log(amount);\n      this.emit('MSmartPurchased', amount);\n    });\n    // staking.on('Staked', (sender: string, pool: string, lockPeriod: string, amount: string) => {\n    //     console.log(amount)\n    //     this.emit('MSmartPurchased', amount)\n    // })\n  }\n\n  async disconnect() {\n    var _this$_provider, _this$_provider$remov;\n    (_this$_provider = this._provider) === null || _this$_provider === void 0 ? void 0 : (_this$_provider$remov = _this$_provider.removeAllListeners) === null || _this$_provider$remov === void 0 ? void 0 : _this$_provider$remov.call(_this$_provider);\n  }\n  async checkConnection() {\n    console.log(this._provider, this._signer, this._signer);\n  }\n  async getSigner(chain) {\n    if (this._chain && this._signer && this._networks[chain].chainId === this._networks[this._chain].chainId) {\n      return this._signer;\n    }\n    const network = this._networks[chain];\n    const provider = this.getInjectedProvider();\n    try {\n      var _provider$request2;\n      await ((_provider$request2 = provider.request) === null || _provider$request2 === void 0 ? void 0 : _provider$request2.call(provider, {\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: serializeChainId(network.chainId)\n        }]\n      }));\n    } catch (err) {\n      var _provider$request3;\n      if (z.object({\n        code: z.number()\n      }).parse(err).code !== 4902) {\n        throw err;\n      }\n      await ((_provider$request3 = provider.request) === null || _provider$request3 === void 0 ? void 0 : _provider$request3.call(provider, {\n        method: 'wallet_addEthereumChain',\n        params: [serializeNetwork(network)]\n      }));\n    }\n    this._signer = new providers.Web3Provider(provider).getSigner();\n    this._chain = chain;\n    return this._signer;\n  }\n  getAddr() {\n    var _this$_signer;\n    return (_this$_signer = this._signer) === null || _this$_signer === void 0 ? void 0 : _this$_signer.getAddress();\n  }\n  async getStakes() {\n    const contract = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer);\n    const stakes = await this.fetchUserStakes();\n    stakes && (await Promise.all(stakes.map(async s => {\n      const result = await contract.previewRewards(this.getAddr(), s[6], s[5]);\n      s.push(result);\n    })));\n    return stakes;\n  }\n  async fetchUserStakes() {\n    const staking = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer);\n    try {\n      // const promise = new Array(4).map(async (i: any, index) => await staking.getStakes(index, this.getAddr()))\n\n      const test = [await staking.getStakes(0, this.getAddr()), await staking.getStakes(1, this.getAddr()), await staking.getStakes(2, this.getAddr()), await staking.getStakes(3, this.getAddr())];\n      const first = test[0].map((i, index) => {\n        return [...i, index, 0];\n      });\n      const second = test[1].map((i, index) => {\n        return [...i, index, 1];\n      });\n      const third = test[2].map((i, index) => {\n        return [...i, index, 2];\n      });\n      const four = test[3].map((i, index) => {\n        return [...i, index, 3];\n      });\n      return [...first, ...second, ...third, ...four];\n\n      // return await Promise.all(promise)\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async generateRefCode() {\n    const investment = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n    try {\n      const code = await investment.referralCode(this.getAddr());\n      if (!code) {\n        const transaction = await investment.createReferralCode();\n        transaction.wait().then(async receipt => {\n          console.log(receipt);\n          if (receipt && receipt.status == 1) {\n            return await investment.referralCode(this.getAddr());\n          }\n        });\n      }\n      return code;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getTokenBalance() {\n    const contract = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer);\n    try {\n      return await contract.balanceOf(this.getAddr());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getMSTokenBalance() {\n    const contract = new ethers.Contract(this.contracts.METASMART, this._contractInterface, this._signer);\n    try {\n      return await contract.balanceOf(this.getAddr());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getTeamInfo() {\n    const contract = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n    try {\n      return await contract.userTeam(this.getAddr());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getReferralRewards() {\n    const contract = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n    try {\n      return await contract.referralRewards(this.getAddr());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getPoolsInfo() {\n    const contract = new ethers.Contract(this.contracts.STAKING, this._contractInterface, new providers.JsonRpcProvider(this._networks.eth.rpcUrl));\n    try {\n      const result = [await contract.poolTotalBalance(0), await contract.poolTotalBalance(1), await contract.poolTotalBalance(2), await contract.poolTotalBalance(3)];\n      return result;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async claimRewards(type, index) {\n    const contract = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer);\n    try {\n      return await contract.claim(type, index);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async stakeTokens(type, amount, lockPeriod) {\n    const contract = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer);\n    const tokens = new ethers.Contract(this.contracts.METASMART, this._contractInterface, this._signer);\n    try {\n      const transaction = await tokens.approve(this.contracts.STAKING, ethers.utils.parseEther(amount));\n      transaction.wait().then(async receipt => {\n        console.log(receipt);\n        if (receipt && receipt.status == 1) {\n          await contract.stake(type, ethers.utils.parseEther(amount), (Number(lockPeriod) * 24 * 60 * 60).toString());\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async buyToken(amount, refId) {\n    const investment = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n    try {\n      const isRef = await investment.isRefSetNotAllowed(this.getAddr());\n      if (isRef) {\n        await investment.buyMSmart(ethers.utils.parseEther(amount));\n      } else if (refId) {\n        await investment.buyMSmartWithRef(ethers.utils.parseEther(amount), refId);\n      } else {\n        await investment.buyMSmart(ethers.utils.parseEther(amount));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async approveToken(amount) {\n    const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer);\n    try {\n      const transaction = await tokens.approve(this.contracts.INVESTMENT, ethers.utils.parseEther(amount));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async approveMSToken(amount) {\n    const tokens = new ethers.Contract(this.contracts.METASMART, this._contractInterface, this._signer);\n    try {\n      const transaction = await tokens.approve(this.contracts.STAKING, ethers.utils.parseEther(amount));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getAllowance() {\n    const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer);\n    try {\n      const result = await tokens.allowance(this.getAddr(), this.contracts.INVESTMENT);\n      return ethers.utils.formatEther(result).toString();\n    } catch (e) {\n      console.log(\"ERROR\", e);\n    }\n  }\n  async getMSAllowance() {\n    const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer);\n    try {\n      const result = await tokens.allowance(this.getAddr(), this.contracts.STAKING);\n      return ethers.utils.formatEther(result).toString();\n    } catch (e) {\n      console.log(\"ERROR\", e);\n    }\n  }\n}","map":{"version":3,"names":["ethers","providers","utils","errorCodes","ProviderRpcError","handleMultipleWalletExtensions","serializeChainId","serializeNetwork","z","TypedEmitter","MetamaskWallet","constructor","name","_chain","contracts","MOCTOKEN","INVESTMENT","METASMART","STAKING","_networks","eth","symbol","rpcUrl","chainId","blockExplorerUrl","bsc","instances","Map","_provider","_signer","_contractInterface","Interface","contractSubscriber","setInstances","JsonRpcProvider","network","provider","set","getInjectedProvider","win","window","metamaskProvider","ethereum","p","isMetaMask","request","unsupportedMethod","connect","_provider$request","call","method","getSigner","localStorage","setItem","initSubscriptions","investment","Contract","staking","on","addr","amount","console","log","emit","disconnect","_this$_provider","_this$_provider$remov","removeAllListeners","checkConnection","chain","_provider$request2","params","err","_provider$request3","object","code","number","parse","Web3Provider","getAddr","_this$_signer","getAddress","getStakes","contract","stakes","fetchUserStakes","Promise","all","map","s","result","previewRewards","push","test","first","i","index","second","third","four","e","generateRefCode","referralCode","transaction","createReferralCode","wait","then","receipt","status","getTokenBalance","balanceOf","getMSTokenBalance","getTeamInfo","userTeam","getReferralRewards","referralRewards","getPoolsInfo","poolTotalBalance","claimRewards","type","claim","stakeTokens","lockPeriod","tokens","approve","parseEther","stake","Number","toString","buyToken","refId","isRef","isRefSetNotAllowed","buyMSmart","buyMSmartWithRef","approveToken","approveMSToken","getAllowance","allowance","formatEther","getMSAllowance"],"sources":["/Users/ilya/Downloads/meta-smart-front/src/services/wallet/metamask-wallet.ts"],"sourcesContent":["import {ethers, providers, Signer, utils} from 'ethers';\nimport {errorCodes} from 'eth-rpc-errors'\n\nimport {\n    Chain,\n    EthereumProvider,\n    MetamaskWindow,\n    Network,\n    NetworkConfig,\n    ProviderRpcError,\n    WalletEvents,\n} from './types';\nimport {handleMultipleWalletExtensions, serializeChainId, serializeNetwork} from \"./utils\";\nimport {z} from \"zod\";\nimport {PoolType} from \"../../Components/Pages/Landing/StakingPools/StakingPools\";\nimport {TypedEmitter} from 'tiny-typed-emitter';\n\nexport class MetamaskWallet extends TypedEmitter<WalletEvents> {\n    public readonly name = 'metamask';\n    private _chain: Chain = 'eth';\n    private readonly contracts = {\n        MOCTOKEN: '0xB87EEDCbE62a289004B4537bAb84Ce77A7480155',\n        INVESTMENT: '0x217bc9c92b5d795b133e7fc466bce43b1373b991',\n        METASMART: '0x5D334E28db82D370414942f8413d28C0C4142517',\n        STAKING: '0x30F28E6b6F8592CA2ed6c8fe67FFde2d81E67CC0'\n    }\n    private readonly _networks: NetworkConfig = {\n        eth: {\n            name: \"Ethereum Mainnet\",\n            symbol: 'GoerliETH',\n            rpcUrl: \"https://eth-goerli.g.alchemy.com/v2/Lu_oWw2AZJ9xd0oItEBFs-NDOUyfn9rL\",\n            chainId: 5,\n            blockExplorerUrl: 'https://goerli.etherscan.io',\n        },\n        bsc: {\n            name: \"Binance Smart Chain Testnet\",\n            symbol: 'tBNB',\n            rpcUrl: \"https://data-seed-prebsc-1-s1.binance.org:8545\",\n            chainId: 97,\n            blockExplorerUrl: 'https://testnet.bscscan.com/',\n        }\n    };\n    public readonly instances = new Map<Chain, providers.Provider>();\n    private _provider?: any;\n    private _signer?: Signer;\n    private _contractInterface = new utils.Interface([\n        'function approve(address spender, uint256 amount) public virtual override returns (bool)',\n\n        'function buyMSmartWithRef(uint256 _amount, string memory _referralCode) external',\n        'function buyMSmart(uint256 _amount) public',\n        'function isRefSetNotAllowed(address addr) public view returns (bool)',\n        'function createReferralCode() external',\n        'function referralCode(address addr) public view returns (string)',\n        'function balanceOf(address addr) public view returns (uint256)',\n\n        'function stake(uint8 _pool, uint256 _amount, uint256 _lockPeriod) external',\n        'function getStakes(uint8 _pool, address addr) public view returns ((uint256, uint256, uint256, uint256, uint)[])',\n\n        'function previewRewards(address _user, uint8 _pool, uint256 _poolId) external view returns (uint256)',\n\n        'function userTeam(address addr) public view returns (uint256, uint256)',\n        'function poolTotalBalance(uint8 _pool) public view returns (uint256)',\n        'function referralRewards(address addr) public view returns (uint256)',\n\n        'function claim(uint8 _pool, uint256 _poolId) external',\n\n        'function allowance(address owner, address spender) external view returns (uint256)',\n\n        'event MSmartPurchased(address user, uint256 amount)'\n    ]);\n    public contractSubscriber: any;\n\n    constructor() {\n        super();\n        this.setInstances(this._networks[this._chain]);\n        this._provider = new ethers.providers.JsonRpcProvider(this._networks.eth.rpcUrl);\n    }\n\n    private setInstances(network: Network) {\n        const provider = new providers.JsonRpcProvider(network.rpcUrl);\n\n        this.instances.set(this._chain, provider);\n    }\n\n    private getInjectedProvider() {\n        // if (this._provider) {\n        //     return this._provider;\n        // }\n        const win = window as MetamaskWindow;\n        const metamaskProvider = win.ethereum && handleMultipleWalletExtensions(win.ethereum, p => p.isMetaMask);\n\n        if (\n            !win.ethereum ||\n            !win.ethereum.isMetaMask ||\n            typeof win.ethereum.request !== 'function' ||\n            !metamaskProvider\n        ) {\n            throw new ProviderRpcError(errorCodes.provider.unsupportedMethod, 'Not install extension')\n        }\n\n        this._provider = metamaskProvider;\n        return metamaskProvider;\n    }\n\n    public async connect() {\n        const provider = this.getInjectedProvider();\n\n        await provider.request?.({method: 'eth_requestAccounts'});\n        await this.getSigner(this._chain)\n        await localStorage.setItem('wallet', this.name)\n        await this.initSubscriptions();\n    }\n\n    private initSubscriptions() {\n        const investment = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer)\n        const staking = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer)\n\n        investment.on('MSmartPurchased', (addr, amount) => {\n            console.log(amount)\n            this.emit('MSmartPurchased', amount)\n        })\n        // staking.on('Staked', (sender: string, pool: string, lockPeriod: string, amount: string) => {\n        //     console.log(amount)\n        //     this.emit('MSmartPurchased', amount)\n        // })\n    }\n\n\n    public async disconnect() {\n        this._provider?.removeAllListeners?.();\n    }\n\n    public async checkConnection() {\n        console.log(this._provider, this._signer, this._signer)\n    }\n\n    public async getSigner(chain: Chain): Promise<Signer | undefined> {\n        if (\n            this._chain &&\n            this._signer &&\n            this._networks[chain].chainId === this._networks[this._chain].chainId\n        ) {\n            return this._signer;\n        }\n\n        const network = this._networks[chain];\n        const provider = this.getInjectedProvider();\n\n        try {\n            await provider.request?.({\n                method: 'wallet_switchEthereumChain',\n                params: [{chainId: serializeChainId(network.chainId)}],\n            });\n        } catch (err: unknown) {\n            if (z.object({code: z.number()}).parse(err).code !== 4902) {\n                throw err;\n            }\n\n            await provider.request?.({\n                method: 'wallet_addEthereumChain',\n                params: [serializeNetwork(network)],\n            });\n        }\n\n        this._signer = new providers.Web3Provider(provider).getSigner();\n        this._chain = chain;\n        return this._signer;\n    }\n\n    public getAddr() {\n        return this._signer?.getAddress()\n    }\n\n    public async getStakes() {\n        const contract = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer)\n        const stakes = await this.fetchUserStakes()\n\n        stakes && await Promise.all(stakes.map(async (s: any) => {\n            const result = await contract.previewRewards(this.getAddr(), s[6], s[5]);\n            s.push(result);\n        }));\n\n\n        return stakes\n    }\n\n    public async fetchUserStakes() {\n        const staking = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer)\n\n        try {\n            // const promise = new Array(4).map(async (i: any, index) => await staking.getStakes(index, this.getAddr()))\n\n            const test = [await staking.getStakes(0, this.getAddr()), await staking.getStakes(1, this.getAddr()), await staking.getStakes(2, this.getAddr()), await staking.getStakes(3, this.getAddr())]\n\n            const first = test[0].map((i: any, index: number) => {\n                return [...i, index, 0];\n\n            })\n            const second = test[1].map((i: any, index: number) => {\n                return [...i, index, 1];\n\n            })\n            const third = test[2].map((i: any, index: number) => {\n                return [...i, index, 2];\n\n            })\n            const four = test[3].map((i: any, index: number) => {\n                return [...i, index, 3];\n\n            })\n\n            return [...first, ...second, ...third, ...four]\n\n            // return await Promise.all(promise)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async generateRefCode() {\n        const investment = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer)\n\n        try {\n            const code = await investment.referralCode(this.getAddr())\n            if (!code) {\n                const transaction = await investment.createReferralCode()\n                transaction.wait().then(async (receipt: any) => {\n                    console.log(receipt)\n                    if (receipt && receipt.status == 1) {\n                        return await investment.referralCode(this.getAddr())\n                    }\n                })\n            }\n\n            return code;\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getTokenBalance() {\n        const contract = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer)\n        \n        try {\n            return await contract.balanceOf(this.getAddr())\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getMSTokenBalance() {\n        const contract = new ethers.Contract(this.contracts.METASMART, this._contractInterface, this._signer)\n        \n        try {\n            return await contract.balanceOf(this.getAddr())\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getTeamInfo() {\n        const contract = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer)\n\n        try {\n            return await contract.userTeam(this.getAddr())\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getReferralRewards() {\n        const contract = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer)\n\n        try {\n            return await contract.referralRewards(this.getAddr())\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getPoolsInfo() {\n        const contract = new ethers.Contract(this.contracts.STAKING, this._contractInterface, new providers.JsonRpcProvider(this._networks.eth.rpcUrl))\n\n        try {\n            const result = [\n                await contract.poolTotalBalance(0),\n                await contract.poolTotalBalance(1),\n                await contract.poolTotalBalance(2),\n                await contract.poolTotalBalance(3)\n            ]\n            return result\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async claimRewards(type: PoolType, index: number) {\n        const contract = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer)\n\n        try {\n            return await contract.claim(type, index)\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async stakeTokens(type: PoolType, amount: string, lockPeriod: string) {\n        const contract = new ethers.Contract(this.contracts.STAKING, this._contractInterface, this._signer)\n        const tokens = new ethers.Contract(this.contracts.METASMART, this._contractInterface, this._signer)\n\n        try {\n            const transaction = await tokens.approve(this.contracts.STAKING, ethers.utils.parseEther(amount))\n            transaction.wait().then(async (receipt: any) => {\n                console.log(receipt)\n                if (receipt && receipt.status == 1) {\n                    await contract.stake(type, ethers.utils.parseEther(amount), (Number(lockPeriod) * 24 * 60 * 60).toString())\n                }\n            })\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async buyToken(amount: string, refId: string) {\n        const investment = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer)\n\n        try {\n            const isRef = await investment.isRefSetNotAllowed(this.getAddr())\n            if (isRef) {\n                await investment.buyMSmart(ethers.utils.parseEther(amount));\n            } else if (refId) {\n                await investment.buyMSmartWithRef(ethers.utils.parseEther(amount), refId);\n            } else {\n                await investment.buyMSmart(ethers.utils.parseEther(amount));\n            }\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async approveToken(amount: string) {\n        const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer)\n        try {\n            const transaction = await tokens.approve(this.contracts.INVESTMENT, ethers.utils.parseEther(amount));\n        } catch (e) {\n            console.log(e)\n        }\n    } \n\n    public async approveMSToken(amount: string) {\n        const tokens = new ethers.Contract(this.contracts.METASMART, this._contractInterface, this._signer)\n        try {\n            const transaction = await tokens.approve(this.contracts.STAKING, ethers.utils.parseEther(amount));\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getAllowance() {\n        const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer)\n        try {\n            const result = await tokens.allowance(this.getAddr(), this.contracts.INVESTMENT);            \n            return ethers.utils.formatEther(result).toString();\n        } catch (e) {\n            console.log(\"ERROR\", e);\n        }\n    }\n\n    public async getMSAllowance() {\n        const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer)\n        try {\n            const result = await tokens.allowance(this.getAddr(), this.contracts.STAKING);            \n            return ethers.utils.formatEther(result).toString();\n        } catch (e) {\n            console.log(\"ERROR\", e);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}