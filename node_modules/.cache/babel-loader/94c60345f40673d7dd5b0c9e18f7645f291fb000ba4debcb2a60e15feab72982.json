{"ast":null,"code":"import { z } from 'zod';\nexport const Chain = z.enum(['bsc']);\nexport const Network = z.object({\n  name: z.string(),\n  symbol: z.string(),\n  chainId: z.number().int().positive(),\n  rpcUrl: z.string().url(),\n  blockExplorerUrl: z.string().url()\n});\nexport const NetworkConfig = z.object({\n  bsc: Network,\n  eth: Network\n});\nexport class ProviderRpcError extends Error {\n  constructor(code, message, data) {\n    super(message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n  }\n}","map":{"version":3,"names":["z","Chain","enum","Network","object","name","string","symbol","chainId","number","int","positive","rpcUrl","url","blockExplorerUrl","NetworkConfig","bsc","eth","ProviderRpcError","Error","constructor","code","message","data"],"sources":["/Users/val/Desktop/PROGM/Ouroboros/src/services/wallet/types.ts"],"sourcesContent":["import {providers} from 'ethers';\nimport {TypedEmitter} from 'tiny-typed-emitter';\nimport {z} from 'zod';\n\nexport const Chain = z.enum(['bsc']);\nexport type Chain = z.infer<typeof Chain>;\n\nexport interface IWalletConnectedInfo {\n    readonly chainId: number;\n}\n\nexport const Network = z.object({\n    name: z.string(),\n    symbol: z.string(),\n    chainId: z.number().int().positive(),\n    rpcUrl: z.string().url(),\n    blockExplorerUrl: z.string().url(),\n});\nexport type Network = z.infer<typeof Network>;\nexport const NetworkConfig = z.object({bsc: Network, eth: Network });\nexport type NetworkConfig = z.infer<typeof NetworkConfig>;\n\nexport interface IProviderRpcError extends Error {\n    message: string;\n    code: number;\n    data?: unknown;\n}\n\nexport class ProviderRpcError extends Error implements IProviderRpcError {\n    code: number;\n    data?: unknown;\n\n    constructor(code: number, message: string, data?: unknown) {\n        super(message);\n        this.code = code;\n        this.data = data;\n    }\n}\n\nexport interface WalletEvents {\n    MSmartPurchased( amount: string): void\n\n    Staked(sender: string, pool: string, lockPeriod: string, amount: string): void\n}\n\nexport type InjectedProvider = providers.ExternalProvider & { isCoinbase?: boolean };\nexport type EthereumProvider =\n    providers.ExternalProvider\n    & Partial<TypedEmitter<WalletEvents>>\n    & { chainId?: string }\n    & { providers?: InjectedProvider[] };\n\nexport interface MetamaskWindow extends Window {\n    ethereum?: EthereumProvider;\n}"],"mappings":"AAEA,SAAQA,CAAC,QAAO,KAAK;AAErB,OAAO,MAAMC,KAAK,GAAGD,CAAC,CAACE,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;AAOpC,OAAO,MAAMC,OAAO,GAAGH,CAAC,CAACI,MAAM,CAAC;EAC5BC,IAAI,EAAEL,CAAC,CAACM,MAAM,EAAE;EAChBC,MAAM,EAAEP,CAAC,CAACM,MAAM,EAAE;EAClBE,OAAO,EAAER,CAAC,CAACS,MAAM,EAAE,CAACC,GAAG,EAAE,CAACC,QAAQ,EAAE;EACpCC,MAAM,EAAEZ,CAAC,CAACM,MAAM,EAAE,CAACO,GAAG,EAAE;EACxBC,gBAAgB,EAAEd,CAAC,CAACM,MAAM,EAAE,CAACO,GAAG;AACpC,CAAC,CAAC;AAEF,OAAO,MAAME,aAAa,GAAGf,CAAC,CAACI,MAAM,CAAC;EAACY,GAAG,EAAEb,OAAO;EAAEc,GAAG,EAAEd;AAAQ,CAAC,CAAC;AASpE,OAAO,MAAMe,gBAAgB,SAASC,KAAK,CAA8B;EAIrEC,WAAWA,CAACC,IAAY,EAAEC,OAAe,EAAEC,IAAc,EAAE;IACvD,KAAK,CAACD,OAAO,CAAC;IAAC,KAJnBD,IAAI;IAAA,KACJE,IAAI;IAIA,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAGA,IAAI;EACpB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}