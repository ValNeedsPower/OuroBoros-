{"ast":null,"code":"import { ethers, providers, utils } from 'ethers';\nimport { errorCodes } from 'eth-rpc-errors';\nimport { ProviderRpcError } from './types';\nimport { handleMultipleWalletExtensions, serializeChainId, serializeNetwork } from \"./utils\";\nimport { z } from \"zod\";\nimport { TypedEmitter } from 'tiny-typed-emitter';\nexport class MetamaskWallet extends TypedEmitter {\n  constructor() {\n    super();\n    this.name = 'metamask';\n    this._chain = 'eth';\n    this.contracts = {\n      MOCTOKEN: '0x4F0bB89a79F06A4f7daF6a399d80ce2912f00910',\n      INVESTMENT: '0xFF18765da35E1E2b0e99ddA0b7cAaCb8ed26D07D',\n      METASMART: '0xdFEE3b8261C3fC2cB226D7D2857F968b54553E99'\n    };\n    this._networks = {\n      eth: {\n        name: \"Ethereum Mainnet\",\n        symbol: 'GoerliETH',\n        rpcUrl: \"https://eth-goerli.g.alchemy.com/v2/Lu_oWw2AZJ9xd0oItEBFs-NDOUyfn9rL\",\n        chainId: 5,\n        blockExplorerUrl: 'https://goerli.etherscan.io'\n      },\n      bsc: {\n        name: \"Binance Smart Chain Testnet\",\n        symbol: 'tBNB',\n        rpcUrl: \"https://data-seed-prebsc-1-s1.binance.org:8545\",\n        chainId: 97,\n        blockExplorerUrl: 'https://testnet.bscscan.com/'\n      }\n    };\n    this.instances = new Map();\n    this._provider = void 0;\n    this._signer = void 0;\n    this._contractInterface = new utils.Interface(['function approve(address spender, uint256 amount) public virtual override returns (bool)', 'function buyMSmartWithRef(uint256 _amount, string memory _referralCode) external', 'function buyMSmart(uint256 _amount) public', 'function isRefSetNotAllowed(address addr) public view returns (bool)', 'function createReferralCode() external', 'function referralCode(address addr) public view returns (string)', 'function balanceOf(address addr) public view returns (uint256)', 'function stake(uint8 _pool, uint256 _amount, uint256 _lockPeriod) external', 'function getStakes(uint8 _pool, address addr) public view returns ((uint256, uint256, uint256, uint256, uint)[])', 'function previewRewards(address _user, uint8 _pool, uint256 _poolId) external view returns (uint256)', 'function userTeam(address addr) public view returns (uint256, uint256)', 'function poolTotalBalance(uint8 _pool) public view returns (uint256)', 'function referralRewards(address addr) public view returns (uint256)', 'function claim(uint8 _pool, uint256 _poolId) external', 'function allowance(address owner, address spender) external view returns (uint256)', 'event MSmartPurchased(address user, uint256 amount)']);\n    this.contractSubscriber = void 0;\n    this.setInstances(this._networks[this._chain]);\n    this._provider = new ethers.providers.JsonRpcProvider(this._networks.eth.rpcUrl);\n  }\n  setInstances(network) {\n    const provider = new providers.JsonRpcProvider(network.rpcUrl);\n    this.instances.set(this._chain, provider);\n  }\n  getInjectedProvider() {\n    // if (this._provider) {\n    //     return this._provider;\n    // }\n    const win = window;\n    const metamaskProvider = win.ethereum && handleMultipleWalletExtensions(win.ethereum, p => p.isMetaMask);\n    if (!win.ethereum || !win.ethereum.isMetaMask || typeof win.ethereum.request !== 'function' || !metamaskProvider) {\n      throw new ProviderRpcError(errorCodes.provider.unsupportedMethod, 'Not install extension');\n    }\n    this._provider = metamaskProvider;\n    return metamaskProvider;\n  }\n  async connect() {\n    var _provider$request;\n    const provider = this.getInjectedProvider();\n    await ((_provider$request = provider.request) === null || _provider$request === void 0 ? void 0 : _provider$request.call(provider, {\n      method: 'eth_requestAccounts'\n    }));\n    await this.getSigner(this._chain);\n    await localStorage.setItem('wallet', this.name);\n  }\n  async disconnect() {\n    var _this$_provider, _this$_provider$remov;\n    (_this$_provider = this._provider) === null || _this$_provider === void 0 ? void 0 : (_this$_provider$remov = _this$_provider.removeAllListeners) === null || _this$_provider$remov === void 0 ? void 0 : _this$_provider$remov.call(_this$_provider);\n  }\n  async checkConnection() {\n    console.log(this._provider, this._signer, this._signer);\n  }\n  async getSigner(chain) {\n    if (this._chain && this._signer && this._networks[chain].chainId === this._networks[this._chain].chainId) {\n      return this._signer;\n    }\n    const network = this._networks[chain];\n    const provider = this.getInjectedProvider();\n    try {\n      var _provider$request2;\n      await ((_provider$request2 = provider.request) === null || _provider$request2 === void 0 ? void 0 : _provider$request2.call(provider, {\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: serializeChainId(network.chainId)\n        }]\n      }));\n    } catch (err) {\n      var _provider$request3;\n      if (z.object({\n        code: z.number()\n      }).parse(err).code !== 4902) {\n        throw err;\n      }\n      await ((_provider$request3 = provider.request) === null || _provider$request3 === void 0 ? void 0 : _provider$request3.call(provider, {\n        method: 'wallet_addEthereumChain',\n        params: [serializeNetwork(network)]\n      }));\n    }\n    this._signer = new providers.Web3Provider(provider).getSigner();\n    this._chain = chain;\n    return this._signer;\n  }\n  getAddr() {\n    var _this$_signer;\n    return (_this$_signer = this._signer) === null || _this$_signer === void 0 ? void 0 : _this$_signer.getAddress();\n  }\n  async getTokenBalance() {\n    const contract = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer);\n    try {\n      return await contract.balanceOf(this.getAddr());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getMSTokenBalance() {\n    const contract = new ethers.Contract(this.contracts.METASMART, this._contractInterface, this._signer);\n    try {\n      return await contract.balanceOf(this.getAddr());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getTeamInfo() {\n    const contract = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n    try {\n      return await contract.userTeam(this.getAddr());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getReferralRewards() {\n    const contract = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n    try {\n      return await contract.referralRewards(this.getAddr());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  //New function\n\n  async buyToken(amount) {\n    const investment = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n    try {\n      await investment.buyTokens(ethers.utils.parseEther(amount));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async approveToken(amount) {\n    const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer);\n    try {\n      const transaction = await tokens.approve(this.contracts.INVESTMENT, ethers.utils.parseEther(amount));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  async getAllowance() {\n    const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer);\n    try {\n      const result = await tokens.allowance(this.getAddr(), this.contracts.INVESTMENT);\n      return ethers.utils.formatEther(result).toString();\n    } catch (e) {\n      console.log(\"ERROR\", e);\n    }\n  }\n}","map":{"version":3,"names":["ethers","providers","utils","errorCodes","ProviderRpcError","handleMultipleWalletExtensions","serializeChainId","serializeNetwork","z","TypedEmitter","MetamaskWallet","constructor","name","_chain","contracts","MOCTOKEN","INVESTMENT","METASMART","_networks","eth","symbol","rpcUrl","chainId","blockExplorerUrl","bsc","instances","Map","_provider","_signer","_contractInterface","Interface","contractSubscriber","setInstances","JsonRpcProvider","network","provider","set","getInjectedProvider","win","window","metamaskProvider","ethereum","p","isMetaMask","request","unsupportedMethod","connect","_provider$request","call","method","getSigner","localStorage","setItem","disconnect","_this$_provider","_this$_provider$remov","removeAllListeners","checkConnection","console","log","chain","_provider$request2","params","err","_provider$request3","object","code","number","parse","Web3Provider","getAddr","_this$_signer","getAddress","getTokenBalance","contract","Contract","balanceOf","e","getMSTokenBalance","getTeamInfo","userTeam","getReferralRewards","referralRewards","buyToken","amount","investment","buyTokens","parseEther","approveToken","tokens","transaction","approve","getAllowance","result","allowance","formatEther","toString"],"sources":["/Users/val/Desktop/PROGM/Ouroboros/src/services/wallet/metamask-wallet.ts"],"sourcesContent":["import {ethers, providers, Signer, utils} from 'ethers';\nimport {errorCodes} from 'eth-rpc-errors'\n\nimport {\n    Chain,\n    EthereumProvider,\n    MetamaskWindow,\n    Network,\n    NetworkConfig,\n    ProviderRpcError,\n    WalletEvents,\n} from './types';\nimport {handleMultipleWalletExtensions, serializeChainId, serializeNetwork} from \"./utils\";\nimport {z} from \"zod\";\nimport {PoolType} from \"../../Components/Pages/Landing/StakingPools/StakingPools\";\nimport {TypedEmitter} from 'tiny-typed-emitter';\n\nexport class MetamaskWallet extends TypedEmitter<WalletEvents> {\n    public readonly name = 'metamask';\n    private _chain: Chain = 'eth';\n    private readonly contracts = {\n        MOCTOKEN: '0x4F0bB89a79F06A4f7daF6a399d80ce2912f00910',\n        INVESTMENT: '0xFF18765da35E1E2b0e99ddA0b7cAaCb8ed26D07D',\n        METASMART: '0xdFEE3b8261C3fC2cB226D7D2857F968b54553E99',\n    }\n    private readonly _networks: NetworkConfig = {\n        eth: {\n            name: \"Ethereum Mainnet\",\n            symbol: 'GoerliETH',\n            rpcUrl: \"https://eth-goerli.g.alchemy.com/v2/Lu_oWw2AZJ9xd0oItEBFs-NDOUyfn9rL\",\n            chainId: 5,\n            blockExplorerUrl: 'https://goerli.etherscan.io',\n        },\n        bsc: {\n            name: \"Binance Smart Chain Testnet\",\n            symbol: 'tBNB',\n            rpcUrl: \"https://data-seed-prebsc-1-s1.binance.org:8545\",\n            chainId: 97,\n            blockExplorerUrl: 'https://testnet.bscscan.com/',\n        }\n    };\n    public readonly instances = new Map<Chain, providers.Provider>();\n    private _provider?: any;\n    private _signer?: Signer;\n    private _contractInterface = new utils.Interface([\n        'function approve(address spender, uint256 amount) public virtual override returns (bool)',\n\n        'function buyMSmartWithRef(uint256 _amount, string memory _referralCode) external',\n        'function buyMSmart(uint256 _amount) public',\n        'function isRefSetNotAllowed(address addr) public view returns (bool)',\n        'function createReferralCode() external',\n        'function referralCode(address addr) public view returns (string)',\n        'function balanceOf(address addr) public view returns (uint256)',\n\n        'function stake(uint8 _pool, uint256 _amount, uint256 _lockPeriod) external',\n        'function getStakes(uint8 _pool, address addr) public view returns ((uint256, uint256, uint256, uint256, uint)[])',\n\n        'function previewRewards(address _user, uint8 _pool, uint256 _poolId) external view returns (uint256)',\n\n        'function userTeam(address addr) public view returns (uint256, uint256)',\n        'function poolTotalBalance(uint8 _pool) public view returns (uint256)',\n        'function referralRewards(address addr) public view returns (uint256)',\n\n        'function claim(uint8 _pool, uint256 _poolId) external',\n\n        'function allowance(address owner, address spender) external view returns (uint256)',\n\n        'event MSmartPurchased(address user, uint256 amount)'\n    ]);\n    public contractSubscriber: any;\n\n    constructor() {\n        super();\n        this.setInstances(this._networks[this._chain]);\n        this._provider = new ethers.providers.JsonRpcProvider(this._networks.eth.rpcUrl);\n    }\n\n    private setInstances(network: Network) {\n        const provider = new providers.JsonRpcProvider(network.rpcUrl);\n\n        this.instances.set(this._chain, provider);\n    }\n\n    private getInjectedProvider() {\n        // if (this._provider) {\n        //     return this._provider;\n        // }\n        const win = window as MetamaskWindow;\n        const metamaskProvider = win.ethereum && handleMultipleWalletExtensions(win.ethereum, p => p.isMetaMask);\n\n        if (\n            !win.ethereum ||\n            !win.ethereum.isMetaMask ||\n            typeof win.ethereum.request !== 'function' ||\n            !metamaskProvider\n        ) {\n            throw new ProviderRpcError(errorCodes.provider.unsupportedMethod, 'Not install extension')\n        }\n\n        this._provider = metamaskProvider;\n        return metamaskProvider;\n    }\n\n    public async connect() {\n        const provider = this.getInjectedProvider();\n\n        await provider.request?.({method: 'eth_requestAccounts'});\n        await this.getSigner(this._chain)\n        await localStorage.setItem('wallet', this.name)\n    }\n\n   \n\n\n    public async disconnect() {\n        this._provider?.removeAllListeners?.();\n    }\n\n    public async checkConnection() {\n        console.log(this._provider, this._signer, this._signer)\n    }\n\n    public async getSigner(chain: Chain): Promise<Signer | undefined> {\n        if (\n            this._chain &&\n            this._signer &&\n            this._networks[chain].chainId === this._networks[this._chain].chainId\n        ) {\n            return this._signer;\n        }\n\n        const network = this._networks[chain];\n        const provider = this.getInjectedProvider();\n\n        try {\n            await provider.request?.({\n                method: 'wallet_switchEthereumChain',\n                params: [{chainId: serializeChainId(network.chainId)}],\n            });\n        } catch (err: unknown) {\n            if (z.object({code: z.number()}).parse(err).code !== 4902) {\n                throw err;\n            }\n\n            await provider.request?.({\n                method: 'wallet_addEthereumChain',\n                params: [serializeNetwork(network)],\n            });\n        }\n\n        this._signer = new providers.Web3Provider(provider).getSigner();\n        this._chain = chain;\n        return this._signer;\n    }\n\n    public getAddr() {\n        return this._signer?.getAddress()\n    }\n\n\n   \n\n    \n\n    public async getTokenBalance() {\n        const contract = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer)\n        \n        try {\n            return await contract.balanceOf(this.getAddr())\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getMSTokenBalance() {\n        const contract = new ethers.Contract(this.contracts.METASMART, this._contractInterface, this._signer)\n        \n        try {\n            return await contract.balanceOf(this.getAddr())\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getTeamInfo() {\n        const contract = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer)\n\n        try {\n            return await contract.userTeam(this.getAddr())\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    public async getReferralRewards() {\n        const contract = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer)\n\n        try {\n            return await contract.referralRewards(this.getAddr())\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    \n\n   //New function\n\n   public async buyToken(amount: string) {\n    const investment = new ethers.Contract(this.contracts.INVESTMENT, this._contractInterface, this._signer);\n  \n    try {\n      await investment.buyTokens(ethers.utils.parseEther(amount));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n\n\n\n    \n\n    public async approveToken(amount: string) {\n        const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer)\n        try {\n            const transaction = await tokens.approve(this.contracts.INVESTMENT, ethers.utils.parseEther(amount));\n\n        } catch (e) {\n            console.log(e)\n        }\n    } \n\n    public async getAllowance() {\n        const tokens = new ethers.Contract(this.contracts.MOCTOKEN, this._contractInterface, this._signer)\n        try {\n            const result = await tokens.allowance(this.getAddr(), this.contracts.INVESTMENT);            \n            return ethers.utils.formatEther(result).toString();\n        } catch (e) {\n            console.log(\"ERROR\", e);\n        }\n    }}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}